rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the current user is the owner of a document
    function isOwner(resource) {
      return resource.data.ownerId == request.auth.uid;
    }

    // Helper function to check if the current user is a member of at least one space in the document
    function isSpaceMember(resource) {
      return resource.data.spaceIds != null &&
             resource.data.spaceIds.hasAny(getUserSpaceIds());
    }

    // Function to get the spaces that the current user is a member of
    function getUserSpaceIds() {
      return get(/databases/$(database)/documents/user/$(request.auth.uid)).data.spaceIds;
    }

    // Generic rules that apply to all entity collections
    match /{entityType}/{documentId} {
      // Default deny all
      allow read, write: if false;
    }

    // User collection
    match /user/{userId} {
      allow read: if isSignedIn() && (isOwner(resource) || isSpaceMember(resource));
      allow create: if isSignedIn() && isOwner(resource);
      allow update: if isSignedIn() && isOwner(resource)
    }

    // Space collection
    match /space/{spaceId} {
      allow read: if isSignedIn() && (isOwner(resource) || isSpaceMember(resource));
      allow update: if isSignedIn() && isOwner(resource)
      allow create: if isSignedIn() && isOwner(resource);
      allow delete: if isSignedIn() && isOwner(resource);
    }

    // TodoItem collection
    match /todoitem/{todoItemId} {
      allow read: if isSignedIn() && (isOwner(resource) || isSpaceMember(resource));
      allow create: if isSignedIn() && isOwner(resource);
      allow update: if isSignedIn() && (isOwner(resource) || isSpaceMember(resource));
      allow delete: if isSignedIn() && isOwner(resource);
    }

    // TodoItemEvent collection
    match /todoitemevent/{eventId} {
      allow read: if isSignedIn() && (isOwner(resource) || isSpaceMember(resource));
      allow create: if isSignedIn() && isOwner(resource);
      allow update: if isSignedIn() && (isOwner(resource) || isSpaceMember(resource));
      allow delete: if isSignedIn() && isOwner(resource);
    }

    // Recipe collection
    match /recipe/{recipeId} {
      allow read: if isSignedIn() && (isOwner(resource) || isSpaceMember(resource));
      allow create: if isSignedIn() && isOwner(resource);
      allow update: if isSignedIn() && (isOwner(resource) || isSpaceMember(resource));
      allow delete: if isSignedIn() && isOwner(resource);
    }

    // Meal collection
    match /meal/{mealId} {
      allow read: if isSignedIn() && (isOwner(resource) || isSpaceMember(resource));
      allow create: if isSignedIn() && isOwner(resource);
      allow update: if isSignedIn() && (isOwner(resource) || isSpaceMember(resource));
      allow delete: if isSignedIn() && isOwner(resource);
    }

    // ShoppingListItem collection
    match /shoppinglistitem/{itemId} {
      allow read: if isSignedIn() && (isOwner(resource) || isSpaceMember(resource));
      allow create: if isSignedIn() && isOwner(resource);
      allow update: if isSignedIn() && (isOwner(resource) || isSpaceMember(resource));
      allow delete: if isSignedIn() && isOwner(resource);
    }

    // Add a special meta collection for sync tracking
    match /sync_metadata/{userId} {
      // Users can only read/write their own sync metadata
      allow read, write: if isSignedIn() && request.auth.uid == userId;
    }
  }
}
